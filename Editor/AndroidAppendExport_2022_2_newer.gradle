android.applicationVariants.all { variant ->
	variant.outputs.each { output ->
		def processManifest = output.getProcessManifestProvider().get()
		processManifest.doLast { task ->
			def outputDir = task.multiApkManifestOutputDirectory
			File outputDirectory
			if (outputDir instanceof File) {
				outputDirectory = outputDir
			} else {
				outputDirectory = outputDir.get().asFile
			}
			File manifestOutFile = file("$outputDirectory/AndroidManifest.xml")

			if (manifestOutFile.exists() && manifestOutFile.canRead() && manifestOutFile.canWrite()) {
				def manifestFile = manifestOutFile
				///这里第二个参数是 false ，所以 namespace 是展开的
				def xml = new XmlParser(false, false).parse(manifestFile)
				def exportedTag = "android:exported"
				def nameTag = "android:name"

				def nodes = xml.application[0].'*'.findAll {
					//挑选要修改的节点，没有指定 exported 的才需要增加
					(it.name() == 'activity' || it.name() == 'receiver' || it.name() == 'service') && it.attribute(exportedTag) == null

				}
				///添加 exported，默认 false
				nodes.each {
					def isMain = false
					it.each {
						if (it.name() == "intent-filter") {
							it.each {
								if (it.name() == "action") {
									// 检测到应用程序入口给 exported = true
									if (it.attributes().get(nameTag) == "android.intent.action.MAIN") {
										isMain = true
									}
								}
							}
						}
					}
					it.attributes().put(exportedTag, "${isMain}")
				}
				PrintWriter pw = new PrintWriter(manifestFile)
				pw.write(groovy.xml.XmlUtil.serialize(xml))
				pw.close()
			}
		}
	}
}